#version 450 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const vec3 colors[256]=vec3[256](
    vec3(0,0,0),
    vec3(128,0,0),
    vec3(0,128,0),
    vec3(128,128,0),
    vec3(0,0,128),
    vec3(128,0,128),
    vec3(0,128,128),
    vec3(192,192,192),
    vec3(128,128,128),
    vec3(255,0,0),
    vec3(0,255,0),
    vec3(255,255,0),
    vec3(0,0,255),
    vec3(255,0,255),
    vec3(0,255,255),
    vec3(255,255,255),
    vec3(0,0,0),
    vec3(0,0,95),
    vec3(0,0,135),
    vec3(0,0,175),
    vec3(0,0,215),
    vec3(0,0,255),
    vec3(0,95,0),
    vec3(0,95,95),
    vec3(0,95,135),
    vec3(0,95,175),
    vec3(0,95,215),
    vec3(0,95,255),
    vec3(0,135,0),
    vec3(0,135,95),
    vec3(0,135,135),
    vec3(0,135,175),
    vec3(0,135,215),
    vec3(0,135,255),
    vec3(0,175,0),
    vec3(0,175,95),
    vec3(0,175,135),
    vec3(0,175,175),
    vec3(0,175,215),
    vec3(0,175,255),
    vec3(0,215,0),
    vec3(0,215,95),
    vec3(0,215,135),
    vec3(0,215,175),
    vec3(0,215,215),
    vec3(0,215,255),
    vec3(0,255,0),
    vec3(0,255,95),
    vec3(0,255,135),
    vec3(0,255,175),
    vec3(0,255,215),
    vec3(0,255,255),
    vec3(95,0,0),
    vec3(95,0,95),
    vec3(95,0,135),
    vec3(95,0,175),
    vec3(95,0,215),
    vec3(95,0,255),
    vec3(95,95,0),
    vec3(95,95,95),
    vec3(95,95,135),
    vec3(95,95,175),
    vec3(95,95,215),
    vec3(95,95,255),
    vec3(95,135,0),
    vec3(95,135,95),
    vec3(95,135,135),
    vec3(95,135,175),
    vec3(95,135,215),
    vec3(95,135,255),
    vec3(95,175,0),
    vec3(95,175,95),
    vec3(95,175,135),
    vec3(95,175,175),
    vec3(95,175,215),
    vec3(95,175,255),
    vec3(95,215,0),
    vec3(95,215,95),
    vec3(95,215,135),
    vec3(95,215,175),
    vec3(95,215,215),
    vec3(95,215,255),
    vec3(95,255,0),
    vec3(95,255,95),
    vec3(95,255,135),
    vec3(95,255,175),
    vec3(95,255,215),
    vec3(95,255,255),
    vec3(135,0,0),
    vec3(135,0,95),
    vec3(135,0,135),
    vec3(135,0,175),
    vec3(135,0,215),
    vec3(135,0,255),
    vec3(135,95,0),
    vec3(135,95,95),
    vec3(135,95,135),
    vec3(135,95,175),
    vec3(135,95,215),
    vec3(135,95,255),
    vec3(135,135,0),
    vec3(135,135,95),
    vec3(135,135,135),
    vec3(135,135,175),
    vec3(135,135,215),
    vec3(135,135,255),
    vec3(135,175,0),
    vec3(135,175,95),
    vec3(135,175,135),
    vec3(135,175,175),
    vec3(135,175,215),
    vec3(135,175,255),
    vec3(135,215,0),
    vec3(135,215,95),
    vec3(135,215,135),
    vec3(135,215,175),
    vec3(135,215,215),
    vec3(135,215,255),
    vec3(135,255,0),
    vec3(135,255,95),
    vec3(135,255,135),
    vec3(135,255,175),
    vec3(135,255,215),
    vec3(135,255,255),
    vec3(175,0,0),
    vec3(175,0,95),
    vec3(175,0,135),
    vec3(175,0,175),
    vec3(175,0,215),
    vec3(175,0,255),
    vec3(175,95,0),
    vec3(175,95,95),
    vec3(175,95,135),
    vec3(175,95,175),
    vec3(175,95,215),
    vec3(175,95,255),
    vec3(175,135,0),
    vec3(175,135,95),
    vec3(175,135,135),
    vec3(175,135,175),
    vec3(175,135,215),
    vec3(175,135,255),
    vec3(175,175,0),
    vec3(175,175,95),
    vec3(175,175,135),
    vec3(175,175,175),
    vec3(175,175,215),
    vec3(175,175,255),
    vec3(175,215,0),
    vec3(175,215,95),
    vec3(175,215,135),
    vec3(175,215,175),
    vec3(175,215,215),
    vec3(175,215,255),
    vec3(175,255,0),
    vec3(175,255,95),
    vec3(175,255,135),
    vec3(175,255,175),
    vec3(175,255,215),
    vec3(175,255,255),
    vec3(215,0,0),
    vec3(215,0,95),
    vec3(215,0,135),
    vec3(215,0,175),
    vec3(215,0,215),
    vec3(215,0,255),
    vec3(215,95,0),
    vec3(215,95,95),
    vec3(215,95,135),
    vec3(215,95,175),
    vec3(215,95,215),
    vec3(215,95,255),
    vec3(215,135,0),
    vec3(215,135,95),
    vec3(215,135,135),
    vec3(215,135,175),
    vec3(215,135,215),
    vec3(215,135,255),
    vec3(215,175,0),
    vec3(215,175,95),
    vec3(215,175,135),
    vec3(215,175,175),
    vec3(215,175,215),
    vec3(215,175,255),
    vec3(215,215,0),
    vec3(215,215,95),
    vec3(215,215,135),
    vec3(215,215,175),
    vec3(215,215,215),
    vec3(215,215,255),
    vec3(215,255,0),
    vec3(215,255,95),
    vec3(215,255,135),
    vec3(215,255,175),
    vec3(215,255,215),
    vec3(215,255,255),
    vec3(255,0,0),
    vec3(255,0,95),
    vec3(255,0,135),
    vec3(255,0,175),
    vec3(255,0,215),
    vec3(255,0,255),
    vec3(255,95,0),
    vec3(255,95,95),
    vec3(255,95,135),
    vec3(255,95,175),
    vec3(255,95,215),
    vec3(255,95,255),
    vec3(255,135,0),
    vec3(255,135,95),
    vec3(255,135,135),
    vec3(255,135,175),
    vec3(255,135,215),
    vec3(255,135,255),
    vec3(255,175,0),
    vec3(255,175,95),
    vec3(255,175,135),
    vec3(255,175,175),
    vec3(255,175,215),
    vec3(255,175,255),
    vec3(255,215,0),
    vec3(255,215,95),
    vec3(255,215,135),
    vec3(255,215,175),
    vec3(255,215,215),
    vec3(255,215,255),
    vec3(255,255,0),
    vec3(255,255,95),
    vec3(255,255,135),
    vec3(255,255,175),
    vec3(255,255,215),
    vec3(255,255,255),
    vec3(8,8,8),
    vec3(18,18,18),
    vec3(28,28,28),
    vec3(38,38,38),
    vec3(48,48,48),
    vec3(58,58,58),
    vec3(68,68,68),
    vec3(78,78,78),
    vec3(88,88,88),
    vec3(98,98,98),
    vec3(108,108,108),
    vec3(118,118,118),
    vec3(128,128,128),
    vec3(138,138,138),
    vec3(148,148,148),
    vec3(158,158,158),
    vec3(168,168,168),
    vec3(178,178,178),
    vec3(188,188,188),
    vec3(198,198,198),
    vec3(208,208,208),
    vec3(218,218,218),
    vec3(228,228,228),
    vec3(238,238,238)
);

layout(rgba8, binding = 0) uniform image2D screenIn;

layout(std430, binding=3) buffer ASCII {
    uint chars[];
};

uint getChar(vec4 col) {
    float gray = 0.3 * col.r + 0.59 * col.g + 0.11 * col.b;

    uint c =  46;               // .
    if (gray > 0.2) c = 58;     // :
    if (gray > 0.3) c = 42;     // *
    if (gray > 0.4) c = 111;    // o
    if (gray > 0.5) c = 38;     // &
    if (gray > 0.6) c = 56;     // 8
    if (gray > 0.7) c = 64;     // @
    if (gray > 0.8) c = 35;     // #

    float minDist = 100000;
    // Initial set to 255, easy to debug
    uint closestColorIdx = 255;
    for(int i = 0; i < 256; i++) {
        float dist = distance(vec3(col) * 255, colors[i]);
        if(dist < minDist) {
            minDist = dist;
            closestColorIdx = i;
        }
    }

    // Store color index in second LSB
    uint retVal = (closestColorIdx << 8);
    // Store char in LSB
    retVal |= c;

    return retVal;
}

void main() {
    ivec2 texSize = imageSize(screenIn);
    ivec2 texScale = texSize / ivec2(gl_NumWorkGroups.xy);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy) * texScale;
    vec4 color = imageLoad(screenIn, texelCoord);
    uint char = getChar(color);

    uint y = gl_NumWorkGroups.y - gl_GlobalInvocationID.y;

    uint idx = gl_GlobalInvocationID.x + (y * gl_NumWorkGroups.x);
    // 4 bytes per int
//    uint intIndex = idx / 4;
//    uint withinIntIdx = int(mod(idx, 4));

    // 8 bits per byte
//    char = char << (withinIntIdx * 8);
//    chars[intIndex] |= char;
    chars[idx] = char;
}